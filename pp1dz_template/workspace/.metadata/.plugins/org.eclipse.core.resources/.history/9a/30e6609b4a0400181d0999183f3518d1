package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, BREAK, CLASS, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST;
terminal ADD, SUB, MUL, DIV, MOD, LOGEQU, LOGNEQU, LOGGR, LOGGREQU, LOGLW, LOGLWEQU, LOGAND, LOGOR, EQUAL;
terminal PP, MM, SEMI, COMMA, DOT, LPAREN, RPAREN, LBBRACE, RBBRACE, LBRACE, RBRACE, ELSE;
terminal Integer NUMBER ;
terminal String IDENT, BOOL, CHAR;

nonterminal Program, ProgName, DeclList, DeclVarOnlyList, ConstDecl, ConstDeclList, ConstValue, VarDecl, VarDeclList;
nonterminal	ClassDecl, ExtendsPart, ClassMethodDecl, Type, MethodDeclList, MethodDecl, MethodTypeName, FormPars, FormalParamList;
nonterminal FormalParamDecl, StatementList, Statement, DesignatorStatement, ActList, ActPars, Condition, CondTerm, CondFact, Expr;
nonterminal Term, Factor, Designator, Relop, Addop, Mulop, ArrayPart, GlobalVarDecl, GlobalVarDeclList;

precedence left ELSE;

/*nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; */

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

DeclList ::= (VarDeclarations) DeclList GlobalVarDecl
			 |
			 (ConstDeclarations) DeclList ConstDecl
			 |
			 (ClassDeclarations) DeclList ClassDecl
			 |
			 (NoDecl)/* epsilon */ 
			 ;

DeclVarOnlyList ::= (VarOnlyDeclarations) DeclVarOnlyList VarDecl
					|
					(NoVarOnlyDeclarations)/* epsilon */
					;

ConstDecl ::= (ConstDecl) CONST Type:varType IDENT:varName EQUAL ConstValue:valueType ConstDeclList SEMI
;

ConstDeclList ::= (AnotherConstDecl) ConstDeclList COMMA IDENT:varName EQUAL ConstValue:valueType
				  |
				  (NoAnotherConstDecl)/* epsilon */
				  ;

ConstValue ::= (BooleanValue) BOOL:valueType
			   |
			   (IntegerValue) NUMBER:valueType
			   |
			   (StringValue) CHAR:valueType
			   ;

GlobalVarDecl ::= (GlobalVarDeclElem) Type IDENT ArrayPart GlobalVarDeclList SEMI
				  |
				  (ErrGlobalVarDecl) Type error GlobalVarDeclList SEMI
				  {: parser.log.debug("Oporavak od greske"); :}
				  ;

GlobalVarDeclList ::= (NEmptyGlobalVarDeclList) GlobalVarDeclList COMMA IDENT:VarName ArrayPart
					  |
					  (EmptyGlobalVarDeclList)/* epsilon */
					  ;
				  
VarDecl ::= (VarDecl) Type:varType IDENT:varName ArrayPart VarDeclList SEMI
;

ArrayPart ::= (IsArray) LBBRACE RBBRACE
			  |
			  (IsNotArray)/* epsilon */
			  ;

VarDeclList ::= (AnotherVarDecl) VarDeclList COMMA IDENT:varName ArrayPart
				|
				(NoAnotherVarDecl)/* epsilon */
				;

ClassDecl ::= (ClassDecl) CLASS IDENT:className ExtendsPart LBRACE DeclVarOnlyList ClassMethodDecl RBRACE
;

ExtendsPart ::= (Extension) EXTENDS Type:classType
				|
				(NoExtension)/* epsilon */
				;

ClassMethodDecl ::= (ClassMethods) LBRACE MethodDeclList RBRACE
					|
					(NoClassMethods)/* epsilon */
					;
				
Type ::= (Type) IDENT:typeName 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormPars RPAREN DeclVarOnlyList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethodType) Type:retType IDENT:methName
					|
				   (MethodVoidType) VOID IDENT:methName
				   ;
				   
FormPars ::= (FormParams) FormalParamList 
			 | 
			 (NoFormParam) /* epsilon */ 
			 ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:parType IDENT:parName ArrayPart
;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;
				  
Statement ::= (Assignment) DesignatorStatement SEMI
			  |
			  (IfStmtNoElse) IF LPAREN Condition RPAREN Statement
			  |
			  (IfStmtElse) IF LPAREN Condition RPAREN Statement ELSE Statement
			  |
			  (DoWhileStmt) DO Statement WHILE LPAREN Condition RPAREN SEMI
			  |
			  (BreakStmt) BREAK SEMI
			  |
			  (ContinueStmt) CONTINUE SEMI
			  |
			  (ReturnExprStmt) RETURN Expr:t SEMI
			  |
			  (ReturnNoExprStmt) RETURN SEMI
			  |
			  (ReadStmt) READ LPAREN Designator RPAREN SEMI
			  |
			  (PrintNoNumStmt) PRINT LPAREN Expr RPAREN SEMI
			  |
			  (PrintNumStmt) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			  |
			  (BraceStmt) LBRACE StatementList RBRACE
			  /*|
			  (ErrAssignment) Designator EQUAL error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}*/
			  ;
			  
DesignatorStatement ::= (DesignatorStatementExpr) Designator EQUAL Expr
						|
						(DesignatorStatementActP) Designator LPAREN ActList RPAREN
						|
						(DesignatorStatementPP) Designator PP
						|
						(DesignatorStatementMM) Designator MM
						;

ActList ::= (ActListPar) ActPars
			|
			(NoActList)/* epsilon */
			;

ActPars ::= (AnotherActPars) ActPars COMMA Expr
			|
			(SingleActPars) Expr
			;

Condition ::= (AnotherCondition) Condition LOGOR CondTerm
			  |
			  (SingleCondition) CondTerm
			  ;

CondTerm ::= (AnotherCondTerm) CondTerm LOGAND CondFact
			 |
			 (SingleCondTerm) CondFact
			 ;

CondFact ::= (CondFactNoRelop) Expr
			 |
			 (CondFactRelop) Expr Relop Expr
			 ;
			  
Expr ::= (AnotherExpr) Expr:te Addop Term:t
		 |
		 (SinglePosExpr) Term:t
		 |
		 (SingleNegExpr) SUB Term:t
		 ;
		 
Term ::= (AnotherTerm) Term Mulop Factor:t
		 |
		 (SingleTerm) Factor:t 
		 ;
		 
Factor ::= (DesignatorNoActFactor) Designator:d
		   |
		   (DesignatorActFactor) Designator:d LPAREN ActList RPAREN
		   |
		   (NumberConstFactor) NUMBER
		   |
		   (CharConstFactor) CHAR
		   |
		   (BoolConstFactor) BOOL
		   |
		   (NewNoExprFactor) NEW Type:t
		   |
		   (NewExprFactor) NEW Type:t LBBRACE Expr RBBRACE
		   |
		   (ExprFactor) LPAREN Expr RPAREN
		   ;

Designator ::= (AnotherIdentDesignator) Designator DOT IDENT
			   |
			   (AnotherExprDesignator) Designator LBBRACE Expr RBBRACE
			   |
			   (SingleDesignator) IDENT:name
			   ;

Relop ::= (EqualsRelop) LOGEQU
		  |
		  (NotEqualsRelop) LOGNEQU
		  |
		  (GreaterRelop) LOGGR
		  |
		  (GreaterEqualRelop) LOGGREQU
		  |
		  (LowerRelop) LOGLW
		  |
		  (LowerEqualRelop) LOGLWEQU
		  ;

Addop ::= (PlusAddop) ADD
		  |
		  (MinusAddopt) SUB
		  ;

Mulop ::= (MulMulop) MUL
		  |
		  (DivMulop) DIV
		  |
		  (ModMulop) MOD
		  ;